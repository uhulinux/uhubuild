#!/bin/bash

. /usr/lib/uhubuild/common
scrollout

# UHUBUILD környezetben a fordítást levezénylő szkript
#
# Az első verziót összeállította: Sári Gábor <saga@kde.hu>
# 2004. január 19. táján a II. UHU Csomagoló Party után
#
# A legfrissebb verzió elérhető a http://ubk.hu/ oldalról.
#
# A Changelog a csomag forrásában található
#
# Charlos <charlos1984@citromail.hu>
# Márkus Sándor <msandor@root.hu>
# Sári Gábor <sari.gabor@gmail.com>
# peritus <peritus@freemail.hu>
# Páder Rezső <rezso@rezso.net>

BUILD_VERSION="0.12.2"
VENDOR="UHU Linux Baráti Kör"
# PACKAGER=${PACKAGER:=UBK <ubk@ubk.hu>}

case `basename $0` in
	build)
		export UHUBUILD_DISTR=UBK1;;
	build-2.2)
		export UHUBUILD_DISTR=2.2;;
	build-3)
		export UHUBUILD_DISTR=3;;
	build-ubk1|build-UBK1)
		export UHUBUILD_DISTR=UBK1;;
	build-ubk2|build-UBK2)
		export UHUBUILD_DISTR=UBK2;;
esac

[ "$UID" != 0 ] && {
	redecho "A buildszkript csak root-ként futtatható!"
	exit 1
	}

export UB_ARCH="i386"
export UHUBUILD_VAR=/var/uhubuild
export UHUBUILD_PATH=/usr/src/UHUBUILD
	# Az UHUBUILD_PATH az a könyvtár, amelyben
	# a fejlesztőkörnyezet megtalálható
UHUBUILD_MISC_PATH="$UHUBUILD_PATH"/misc-${UHUBUILD_DISTR}

if [ $# == 0 ]; then
	redecho "*******************************************"
	redecho "*** Nem adtál meg egy UB forrást sem!   ***"
	redecho "*** További információkért indítsd így: ***"
	redecho "*** build-${UHUBUILD_DISTR} -h          ***"
	redecho "*******************************************"
	exit 1
fi

# Nem létezik / hiányos a build környezet, létrehozzuk, ami hiányzik
[ -d "$UHUBUILD_PATH"/UB-${UHUBUILD_DISTR} ] || mkdir -p "$UHUBUILD_PATH"/UB-${UHUBUILD_DISTR}
[ -d "$UHUBUILD_MISC_PATH"/extrarelease/${UB_ARCH} ] || mkdir -p "$UHUBUILD_MISC_PATH"/extrarelease/${UB_ARCH}
[ -d "$UHUBUILD_MISC_PATH"/failed/${UB_ARCH} ] || mkdir -p "$UHUBUILD_MISC_PATH"/failed/${UB_ARCH}
[ -d "$UHUBUILD_MISC_PATH"/snapshot/compile/${UB_ARCH} ] || mkdir -p "$UHUBUILD_MISC_PATH"/snapshot/compile/${UB_ARCH}
[ -d "$UHUBUILD_MISC_PATH"/snapshot/install/${UB_ARCH} ] || mkdir -p "$UHUBUILD_MISC_PATH"/snapshot/install/${UB_ARCH}
[ -d "$UHUBUILD_MISC_PATH"/logpack/${UB_ARCH} ] || mkdir -p "$UHUBUILD_MISC_PATH"/logpack/${UB_ARCH}
[ -d "$UHUBUILD_MISC_PATH"/tmp/${UB_ARCH} ] || mkdir -p "$UHUBUILD_MISC_PATH"/tmp/${UB_ARCH}


for i in "$@"; do
	case $1 in
		-64)
			if [ "$(uname -m)" != "x86_64" ];then
				die "Csak 64 bites módban indítva lehet 64 bites fordítást készíteni!"
			fi
			yellowecho "64 bites fordítás."
			echo
			export UB_ARCH="amd64"
			shift;;
		-cc|--create-contents)
			yellowecho "Contents.gz készítése a packages könyvtárban."
			echo
			export UB_CONTENTS=1
			shift;;
		-ns|--no-snapshot)
			yellowecho "Nem készül egy snapshot sem."
			echo
			export UB_NOSNAPSHOT=1
			shift;;
		-rcs|--remove-csnapshot)
			yellowecho "Régebbi compile snapshot törlése."
			echo
			export UB_RM_CSNAPSHOT=1
			shift;;
		-ris|--remove-isnapshot)
			yellowecho "Régebbi install snapshot törlése."
			echo
			export UB_RM_ISNAPSHOT=1
			shift;;
		-rc|--remove-ccache)
			yellowecho "Régebbi ccache törlése."
			export UB_RM_CCACHE=1
			shift;;
		-rch|--remove-chrootdir)
			yellowecho "CHROOT környezet újra felépítése..."
			echo
			export UB_RM_CHROOTDIR=1
			shift;;
		-usc|--use-csnapshot)
			yellowecho "Compile snapshot használata."
			echo
			export UB_USE_SNAPSHOT=C
			shift;;
		-usi|--use--isnapshot)
			yellowecho "Install snapshot használata."
			echo
			export UB_USE_SNAPSHOT=I
			shift;;
		-ch1|--chroot1)
			export UHUBUILD_CHROOTDIR="$UHUBUILD_VAR"/${UHUBUILD_DISTR}/${UB_ARCH}/chroot1
			shift;;
		-ch2|--chroot2)
			export UHUBUILD_CHROOTDIR="$UHUBUILD_VAR"/${UHUBUILD_DISTR}/${UB_ARCH}/chroot2
			shift;;
		-ch3|--chroot3)
			export UHUBUILD_CHROOTDIR="$UHUBUILD_VAR"/${UHUBUILD_DISTR}/${UB_ARCH}/chroot3
			shift;;
		-ner|--new-extrarelease)
			yellowecho "Extrarelease törlése."
			echo
			export UB_NEW_EXTRARELEASE=1
			shift;;
		-nr|--new-release)
			yellowecho "Release emelése."
			echo
			export UB_NEW_RELEASE=1
			shift;;
		-h|--help)
			scrollout
			appleecho "BUILDSZKRIPT ${BUILD_VERSION}":
			echo
			appleecho "HASZNÁLAT:"
			echo
			appleecho "build-${UHUBUILD_DISTR} $1 [-64][-pv][-ps][-ns][-ncs][-nis][-rs][-rc][-ch1][-ch2][-ch3]"
			appleecho "[-rch][-nuch][-usc|-usi][-cc][-ner] csomag1 [csomag2] [csomag3] [...]"
			echo
			appleecho "vagy (posix kapcsolókkal):"
			appleecho "[--pack-version][--pack-source][--no-snapshot][--no-csnapshot][--no-isnapshot]"
			appleecho "[--remove-ccache][--remove-chrootdir][--chroot1-5][--no-uhubuild-check]"
			appleecho "[--use-csnapshot][--use-isnapshot][--create-contents][--new-extrarelease]"
 			echo
			appleecho "A csomag1 [csomag2] [csomag3] [...] UB források alapján az UHU csomagok elkészítése."
			echo
			appleecho "A megfelelően felépített és előkészített UB csomagoknak"
			appleecho "a következő könyvtár alatt kell elhelyezkedniük:"
			echo
			appleecho "$UHUBUILD_PATH/UB-${UHUBUILD_DISTR}/"
			echo
			yellowecho "Nyomj egy ENTER-t a következő oldalhoz!"
			read
			echo
			appleecho "Amennyiben valamelyik megadott csomag fordítása hiba miatt megszakad, azt a"
			appleecho "fordítás végén a $UHUBUILD_PATH/misc-${UHUBUILD_DISTR}/failed/${UB_ARCH} könyvtárban"
			appleecho "megjelenő, a csomag nevével azonos nevű fájl is jelzi."
			echo
			appleecho "Opcionálisan megadható kapcsolók jelentése:"
			appleecho "[-64]:"
			appleecho "64 bites fordítás."
			echo
			appleecho "[-ns|--no-snapshot]:"
			appleecho "Nem készülnek snapshot fájlok."
			echo
			yellowecho "Nyomj egy ENTER-t a következő oldalhoz!"
			read
			appleecho "[-rs|--remove-snapshot]:"
			appleecho "Törlődnek a régebbi, adott csomaghoz kapcsolódó snapshot fájlok."
			echo
			appleecho "[-rc|--remove-ccache]:"
			appleecho "Törlődik a régebbi, adott csomaghoz kapcsolódó ccache fájl."
			echo
			appleecho "[-ch1-3|--chroot1-3]:"
			appleecho "Megadjuk, mely chroot könvtárt használja az öt közül."
			appleecho "(${UHUBUILD_VAR}/${UHUBUILD_DISTR}/${UB_ARCH}/chroot[1-3]"
			echo
			appleecho "[-rch|--remove-chrootdir]:"
			appleecho "A kapcsoló hatására letörli a chroot környezetet, majd újra felépíti"
			appleecho "azt. Ha nem adunk meg -ch[1-5] kapcsolót, akkor az alapértelmezettként"
			appleecho "a chroot1-et törli."
			echo
			appleecho "[-usc|--use-csnapshot]:"
			appleecho "Az előző fordítás során készült compile snapshot fájl alapján indul újra a"
			appleecho "build folyamat."
			echo
			yellowecho "Nyomj egy ENTER-t a következő oldalhoz!"
			read
			echo
			appleecho "[-usi|--use-isnapshot]:"
			appleecho "Az előző fordítás során készült install snapshot fájl alapján indul újra a"
			appleecho "build folyamat."
			echo
			appleecho "[-cc|--create-contents]:"
			appleecho "Az adott verzió packages könyvtárában a build folyamat végén elkészül egy"
			appleecho "Contents.gz fájl is."
			echo
			appleecho "[-ner|--new-extrarelease]:"
			appleecho "Törli (azaz újból 1-re állítja) a csomag extrarelease értékét. Ez"
			appleecho "főleg akkor lehet hasznos, ha egy adott csomag legelső lefordítása"
			appleecho "nem sikerül elsőre. Így ha valamiért, (de nem feltétlenül hiba"
			appleecho "miatt) később újracsomagoljuk a programot, már ne használjuk ezt a"
			appleecho "kapcsolót!"
			echo
			appleecho "[-h|--help|-?]:"
			appleecho "Ez az a képernyő. ;-)"
			echo
			appleecho "[-V|--version]:"
			appleecho "Kiírja a program verzió számát néhány egyéb információ kíséretében"
			exit 0;;
		-V|--version)
			appleecho "UHUBUILD környezetben a fordítást levezénylő szkript"
			yellowecho "$BUILD_VERSION"
			echo
			appleecho "Az első verziót összeállította: Sári Gábor <saga@kde.hu>"
			appleecho "2004. január 19. táján a II. UHU Csomagoló Party után"
			echo
			appleecho "A legfrissebb verzió elérhető a http://ubk.hu/ oldalról."
			exit 0;;
		esac
done

for i in "$@"; do
	if [ ! -d "$UHUBUILD_PATH"/UB-${UHUBUILD_DISTR}/"$i" ]; then
		echo
		redecho "Nincs '$i' elnevezésű UB forrás!"
		# exit 1
		continue
	fi

ver=$(<"$UHUBUILD_PATH"/UB-${UHUBUILD_DISTR}/"$i"/version)
rel=$(<"$UHUBUILD_PATH"/UB-${UHUBUILD_DISTR}/"$i"/release)

export UHUBUILD_CCACHE_DIR=/var/cache/uhubuild/ccache/${UHUBUILD_DISTR}/${UB_ARCH}
if [ "$UB_NOSNAPSHOT" = "1" ]; then
	export UHUBUILD_COMPILESNAPSHOTDIR=
	export UHUBUILD_INSTALLSNAPSHOTDIR=
else
	export UHUBUILD_COMPILESNAPSHOTDIR="$UHUBUILD_PATH"/misc-${UHUBUILD_DISTR}/snapshot/compile/${UB_ARCH}
	export UHUBUILD_INSTALLSNAPSHOTDIR="$UHUBUILD_PATH"/misc-${UHUBUILD_DISTR}/snapshot/install/${UB_ARCH}
fi

if [ "$UB_RM_CHROOTDIR" = "1" ]; then
		if [ "$UHUBUILD_CHROOTDIR" = "" ]; then
			export UHUBUILD_CHROOTDIR=""$UHUBUILD_VAR"/${UHUBUILD_DISTR}/${UB_ARCH}/chroot1"
			yellowecho "Mivel nem adtál meg chroot számot [1-3], ezért az alapértelmezett,"
			yellowecho "${UHUBUILD_CHROOTDIR}-t fogom törölni."
			echo
		fi
	yellowecho "${UHUBUILD_CHROOTDIR} törlése..."
	echo
	uzenet_var
	scrollout
	yellowecho "${UHUBUILD_CHROOTDIR} törlés alatt..."
	rm -rf "$UHUBUILD_CHROOTDIR"/*
	scrollout
fi

if [ "$UB_USE_SNAPSHOT" = "C" ]; then
	export UHUBUILD_SNAPSHOTFILE="$UHUBUILD_COMPILESNAPSHOTDIR"/${1}_${ver}-${rel}_compiled.tar.gz
	export UB_USE_SNAPSHOT=1
fi

if [ "$UB_USE_SNAPSHOT" = "I" ]; then
	export UHUBUILD_SNAPSHOTFILE="$UHUBUILD_INSTALLSNAPSHOTDIR"/${1}_${ver}-${rel}_installed.tar.gz
	export UB_USE_SNAPSHOT=1
fi

if [ "$UB_USE_SNAPSHOT" = "1" ]; then
	[ -f "$UHUBUILD_SNAPSHOTFILE" ] || {
		# Nem létezik a szükséges snapshot fájl, kilépés!
		redecho "Nem létezik a(z) ${UHUBUILD_SNAPSHOTFILE} fájl!"
		exit 1
	}
fi

export UHUBUILD_APT_SOURCES=/etc/apt/sources.list-build-${UHUBUILD_DISTR}

	# Az előbbi fájlban adjuk meg azokat az apt sorokat,
	# amelyekről letölthetőek a szükséges csomagok!
	# Amennyiben szükésgünk van az általunk készített
	# csomagokra is, adjuk meg pl. a következőt is:

	# deb file:/usr/src/UHUBUILD/packages-1.2 ./

[ -f "$UHUBUILD_APT_SOURCES" ] || {
	# Nem létezik a Build környezet, kilépés!
	redecho "Nem létezik a $UHUBUILD_APT_SOURCES állomány!"
	exit 1
}

export UHUBUILD_LOGPACKDIR="$UHUBUILD_PATH"/misc-${UHUBUILD_DISTR}/logpack/${UB_ARCH}

export UHUBUILD_RESULTDIR=$(mktemp -d "$UHUBUILD_PATH"/misc-${UHUBUILD_DISTR}/tmp/${UB_ARCH}/RESULT.XXXXXX)

	# Az eredményt majd egy ideiglenes könyvtár alá
	# rakjuk, mert így könnyebb lesz törölni a régi
	# változatokat a fordítás végén.

if [ -z "$UHUBUILD_CHROOTDIR" ]; then

	# Ez kívülről természetesen felülbírálható

	export UHUBUILD_CHROOTDIR="$UHUBUILD_VAR/${UHUBUILD_DISTR}/${UB_ARCH}/chroot1:\
						  $UHUBUILD_VAR/${UHUBUILD_DISTR}/${UB_ARCH}/chroot2:\
						  $UHUBUILD_VAR/${UHUBUILD_DISTR}/${UB_ARCH}/chroot3"
fi

trap 'rm -rf $UHUBUILD_RESULTDIR' EXIT

# Az esetleg már létező lokális UHU csomagokhoz kapcsolódó
# Packages fájlok ismételt létrehozása

cd "$UHUBUILD_PATH"/packages-${UHUBUILD_DISTR}/${UB_ARCH}

rm -f Packages{,.gz} Contents{,.gz} Release{,.gpg}

if [ -x /usr/bin/uhu-reposign ]; then
	uhu-reposign "${UHUBUILD_DISTR}" "${UB_ARCH}" "$BUILD_GPGKEY"
else
	if [ "$UB_CONTENTS" = "1" ]; then
		uhu-scanpkgs -c .
	else
		uhu-scanpkgs .
	fi
	apt-ftparchive release . \
		-o APT::FTPArchive::Release::Origin="${VENDOR}" \
		-o APT::FTPArchive::Release::Label="UHU Linux" \
		-o APT::FTPArchive::Release::Version="${UHUBUILD_DISTR}" \
		-o APT::FTPArchive::Release::Architectures="${UB_ARCH}" \
		> ./Release  
	gpg --default-key $BUILD_GPGKEY --armor --detach-sign --sign --output \
		./Release.gpg ./Release
fi

cd "$UHUBUILD_PATH"/UB-${UHUBUILD_DISTR}/
uhubuild-check "$i" || exit 1

echo
yellowecho "A(z) '$i' csomag buildelése következik..."
echo

	# Distribution fix
	if [ -f "$UHUBUILD_PATH"/UB-${UHUBUILD_DISTR}/"$i"/distribution ]; then
		if grep -q -v "${UHUBUILD_DISTR}" "$UHUBUILD_PATH"/UB-${UHUBUILD_DISTR}/"$i"/distribution; then
			sed -i -e "s/^.*$/UHU Linux ${UHUBUILD_DISTR}/g" "$UHUBUILD_PATH"/UB-${UHUBUILD_DISTR}/"$i"/distribution
		fi
	else
		echo "UHU Linux ${UHUBUILD_DISTR}" > "$UHUBUILD_PATH"/UB-${UHUBUILD_DISTR}/"$i"/distribution
	fi

	# Maintainer fix
	if [ -f "$UHUBUILD_PATH"/UB-${UHUBUILD_DISTR}/"$i"/maintainer ]; then
		if grep -q -v "$PACKAGER" "$UHUBUILD_PATH"/UB-${UHUBUILD_DISTR}/"$i"/maintainer; then
			sed -i -e "s/^.*$/$PACKAGER/g" "$UHUBUILD_PATH"/UB-${UHUBUILD_DISTR}/"$i"/maintainer
		fi
	else
		echo "$PACKAGER" > "$UHUBUILD_PATH"/UB-${UHUBUILD_DISTR}/"$i"/maintainer
	fi

	# Közös vendor fájl használata
	if [ -f "$UHUBUILD_PATH"/UB-${UHUBUILD_DISTR}/"$i"/vendor ]; then
		if grep -q -v "$VENDOR" "$UHUBUILD_PATH"/UB-${UHUBUILD_DISTR}/"$i"/vendor; then
		sed -i "s/^.*$/$VENDOR/g" "$UHUBUILD_PATH"/UB-${UHUBUILD_DISTR}/"$i"/vendor
		fi
	else
	echo "$VENDOR" > "$UHUBUILD_PATH"/UB-${UHUBUILD_DISTR}/"$i"/vendor
	fi

	if [ "$UB_RM_CCACHE" = "1" ]; then
	rm -f "$UHUBUILD_CCACHE_DIR"/${i}_ccache.tar.gz
	fi

	if [ "$UB_RM_CSNAPSHOT" = "1" ]; then
		rm -f "$UHUBUILD_COMPILESNAPSHOTDIR"/${i}_${ver}_${rel}-compiled.tar.gz
	fi

	if [ "$UB_RM_ISNAPSHOT" = "1" ]; then
		rm -f "$UHUBUILD_INSTALLSNAPSHOTDIR"/${i}_${ver}-${rel}_installed.tar.gz
	fi

	# Kiszedjük a forrásból a version és a release értékeket, ezek és az
	# eltárolt EXTRARELEASE alapján kiszámoljuk az új extrarelease értékét.

	if [ -f "$UHUBUILD_PATH"/misc-${UHUBUILD_DISTR}/extrarelease/${UB_ARCH}/${i}_${ver}-${rel} ]; then
		extrarel=$(<"$UHUBUILD_PATH"/misc-${UHUBUILD_DISTR}/extrarelease/${UB_ARCH}/${i}_${ver}-${rel})
		extrarel=$((extrarel+1))
	else
		extrarel=1
	fi
	export UHUBUILD_EXTRARELEASE="$extrarel"

	if [ "$UB_NEW_EXTRARELEASE" = "1" ]; then
		rm -f "$UHUBUILD_PATH"/misc-${UHUBUILD_DISTR}/extrarelease/${UB_ARCH}/${i}_${ver}-${rel}
	fi

	if [ "$UB_NEW_RELEASE" = "1" ]; then
		newrel=$((rel+1))
		sed -i "s/$rel/$newrel/g" "$UHUBUILD_PATH"/UB-${UHUBUILD_DISTR}/"$i"/release
		export UHUBUILD_EXTRARELEASE="1"
	fi


	# Hajrá, akkor innentől fordítunk...
	export UHUBUILD_ARCH="${UB_ARCH}"
	uhubuild-chrootbuild "$UHUBUILD_PATH"/UB-${UHUBUILD_DISTR}/"$i" || {

	# Hiba történt!
	# Ennek több csomag együttes fordítása esetén lesz haszna,
	# ha az egyik csomag buildelése hiba miatt megszakad, azt
	# a ...misc-1.2/failed/csomagneve fájl megjelenése jelzi
	# Ezeket a végén kiíratjuk a képernyőre
	touch "$UHUBUILD_PATH"/misc-${UHUBUILD_DISTR}/failed/${UB_ARCH}/"$i"
	continue
	}

	# Siker.

	rm -f "$UHUBUILD_PATH"/misc-${UHUBUILD_DISTR}/failed/${UB_ARCH}/"$i"
	echo $extrarel > "$UHUBUILD_PATH"/misc-${UHUBUILD_DISTR}/extrarelease/${UB_ARCH}/${i}_${ver}-${rel}

	# A kész csomagokat a packages-${UHUBUILD_DISTR}/ alá másoljuk,
	# de töröljük onnan a régebbi példányokat.

	for pkg in $(ls $UHUBUILD_RESULTDIR); do
		rm -f "$UHUBUILD_PATH"/packages-${UHUBUILD_DISTR}/${UB_ARCH}/${pkg%%_*}_*
	done
	cp -a $UHUBUILD_RESULTDIR/* "$UHUBUILD_PATH"/packages-${UHUBUILD_DISTR}/${UB_ARCH}/

	# A Packages és Packages.gz fájlok létrehozása a lokálisan
	# megtalálható új UHU csomagjaink alkalmazhatósága érdekében

	cd "$UHUBUILD_PATH"/packages-${UHUBUILD_DISTR}/${UB_ARCH}

	rm -f Packages{,.gz} Contents{,.gz} Release{,.gpg}

	if [ -x /usr/bin/uhu-reposign ]; then
		uhu-reposign "${UHUBUILD_DISTR}" "${UB_ARCH}" "$BUILD_GPGKEY"
	else
		if [ "$UB_CONTENTS" = "1" ]; then
			uhu-scanpkgs -c .
		else
			uhu-scanpkgs .
		fi
		apt-ftparchive release . \
			-o APT::FTPArchive::Release::Origin="${VENDOR}" \
			-o APT::FTPArchive::Release::Label="UHU Linux" \
			-o APT::FTPArchive::Release::Version="${UHUBUILD_DISTR}" \
			-o APT::FTPArchive::Release::Architectures="${UB_ARCH}" \
			> ./Release  
		gpg --default-key $BUILD_GPGKEY --armor --detach-sign --sign --output \
			./Release.gpg ./Release
	fi

	# Ezek után a /etc/apt/sources.list-1.2 állományba
	# beírható pl. a következő sor:
	# deb file:/usr/src/UHUBUILD/packages-1.2 ./

	greenecho "****************"
	greenecho "*** Rendben. ***"
	greenecho "****************"

done


mv -f "$UHUBUILD_COMPILESNAPSHOTDIR"/${i}_compiled.tar.gz \
	"$UHUBUILD_COMPILESNAPSHOTDIR"/${i}_${ver}-${rel}_compiled.tar.gz \
	2> /dev/null

mv -f "$UHUBUILD_INSTALLSNAPSHOTDIR"/${i}_installed.tar.gz \
	"$UHUBUILD_INSTALLSNAPSHOTDIR"/${i}_${ver}-${rel}_installed.tar.gz \
	2> /dev/null

echo
echo A buildelés befejeződött.
echo

export UHUBUILD_CHROOTDIR=

[ `ls -1 "$UHUBUILD_PATH"/misc-${UHUBUILD_DISTR}/failed/${UB_ARCH}/ | wc -l` = 0 ] || {
	yellowecho A következő ub csomagok utolsó fordítása hiba miatt megszakadt:
	yellowecho
	ls "$UHUBUILD_PATH"/misc-${UHUBUILD_DISTR}/failed/${UB_ARCH}/
		if [ -f "$UHUBUILD_PATH"/misc-${UHUBUILD_DISTR}/failed/${UB_ARCH}/"$i" ]; then
			exit 2
		fi
	exit 0
}

